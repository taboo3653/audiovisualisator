{"version":3,"sources":["assets/audio/song.mp3","components/Cell/index.jsx","components/Visualizer/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cell","value","divStyle","backgroundColor","className","style","Visualizer","props","state","values","audioRef","React","createRef","this","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","dataArray","Uint8Array","frequencyBinCount","source","createMediaElementSource","current","connect","setInterval","getByteTimeDomainData","subArraySize","Math","floor","length","subArrays","i","slice","map","item","sum","reduce","accumulator","currentValue","round","setState","cells","index","key","ref","src","audioFile","autoPlay","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,uOCW5BC,G,YARF,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACRC,EAAW,CACfC,gBAAgB,QAAD,OAAUF,EAAV,eAGjB,OAAO,yBAAKG,UAAU,OAAOC,MAAOH,M,gBCiEvBI,E,YAnEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,OAAQ,IAEV,EAAKC,SAAWC,IAAMC,YALL,E,iFAQE,IAAD,OAClBC,KAAKC,aAAe,IAAKC,OAAOC,cAC9BD,OAAOE,oBACTJ,KAAKK,SAAWL,KAAKC,aAAaK,iBAClCN,KAAKO,UAAY,IAAIC,WAAWR,KAAKK,SAASI,mBAE9CT,KAAKU,OAASV,KAAKC,aAAaU,yBAC9BX,KAAKH,SAASe,SAEhBZ,KAAKU,OAAOG,QAAQb,KAAKK,UAEzBS,aAAY,WACV,EAAKT,SAASU,sBAAsB,EAAKR,WAKzC,IAHA,IAAMS,EAAeC,KAAKC,MAAM,EAAKX,UAAUY,OAAS,KAClDC,EAAY,GAETC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAAUC,GAAK,EAAKd,UAAUe,MAC5BD,EAAIL,EACJK,EAAIL,EAAeA,GAIvB,IAAMpB,EAASwB,EAAUG,KAAI,SAAAC,GAC3B,IAAMC,EAAMD,EAAKE,QAAO,SAACC,EAAaC,GACpC,OAAOD,EAAcC,IACpB,GAEH,OAAOX,KAAKY,MAAMJ,EAAMD,EAAKL,WAG/B,EAAKW,SAAS,CAAElC,aACf,O,+BAGK,IAGFmC,EAFa/B,KAAKL,MAAhBC,OAEa2B,KAAI,SAACC,EAAMQ,GAC9B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAO5C,MAAOoC,OAMlC,OACE,oCACE,6BACE,2BAAOU,IAAKlC,KAAKH,SAAUsC,IAAKC,IAAWC,UAAQ,IACnD,2BAAOF,IAAKC,IAAWC,UAAQ,KAGjC,yBAAK9C,UAAU,cAAcwC,Q,GA9DZjC,IAAMwC,W,MCOhBC,MARf,WACE,OACE,yBAAKhD,UAAU,OACb,kBAAC,EAAD,QCKciD,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.09d59dcb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/song.43051082.mp3\";","import React from \"react\";\r\nimport \"./Cell.scss\";\r\n\r\nconst Cell = ({ value }) => {\r\n  const divStyle = {\r\n    backgroundColor: `rgba(${value}, 0, 0, 1)`\r\n  };\r\n\r\n  return <div className=\"Cell\" style={divStyle}></div>;\r\n};\r\n\r\nexport default Cell;\r\n","import React from \"react\";\nimport \"./Visualizer.scss\";\nimport Cell from \"../Cell\";\nimport audioFile from \"../../assets/audio/song.mp3\";\n\nclass Visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      values: []\n    };\n    this.audioRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.audioContext = new (window.AudioContext ||\n      window.webkitAudioContext)();\n    this.analyser = this.audioContext.createAnalyser();\n    this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n\n    this.source = this.audioContext.createMediaElementSource(\n      this.audioRef.current\n    );\n    this.source.connect(this.analyser);\n\n    setInterval(() => {\n      this.analyser.getByteTimeDomainData(this.dataArray);\n\n      const subArraySize = Math.floor(this.dataArray.length / 144);\n      const subArrays = [];\n\n      for (let i = 0; i < 144; i++) {\n        subArrays[i] = this.dataArray.slice(\n          i * subArraySize,\n          i * subArraySize + subArraySize\n        );\n      }\n\n      const values = subArrays.map(item => {\n        const sum = item.reduce((accumulator, currentValue) => {\n          return accumulator + currentValue;\n        }, 0);\n\n        return Math.round(sum / item.length);\n      });\n\n      this.setState({ values });\n    }, 100);\n  }\n\n  render() {\n    const { values } = this.state;\n\n    const cells = values.map((item, index) => {\n      return <Cell key={index} value={item} />;\n    });\n    /* for (let i = 0; i < this.dataArray; i++) {\n      cells.push(<Cell key={i} />);\n    }*/\n\n    return (\n      <>\n        <div>\n          <audio ref={this.audioRef} src={audioFile} autoPlay />\n          <audio src={audioFile} autoPlay />\n        </div>\n\n        <div className=\"Visualizer\">{cells}</div>\n      </>\n    );\n  }\n}\n\nexport default Visualizer;\n","import React from \"react\";\nimport Visuliser from \"./components/Visualizer\";\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visuliser />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}